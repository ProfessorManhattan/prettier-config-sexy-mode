{
  "languages": [
    {
      "aceMode": "javascript",
      "aliases": ["js", "node"],
      "codemirrorMimeType": "text/javascript",
      "codemirrorMode": "javascript",
      "color": "#f1e05a",
      "extensions": [
        ".js",
        "._js",
        ".bones",
        ".cjs",
        ".es",
        ".es6",
        ".frag",
        ".gs",
        ".jake",
        ".jsb",
        ".jscad",
        ".jsfl",
        ".jsm",
        ".jss",
        ".mjs",
        ".njs",
        ".pac",
        ".sjs",
        ".ssjs",
        ".xsjs",
        ".xsjslib",
        ".wxs"
      ],
      "filenames": ["Jakefile"],
      "interpreters": ["chakra", "d8", "gjs", "js", "node", "nodejs", "qjs", "rhino", "v8", "v8-shell", "zx"],
      "linguistLanguageId": 183,
      "name": "JavaScript",
      "parsers": ["babel", "espree", "meriyah", "babel-flow", "babel-ts", "flow", "typescript"],
      "since": "0.0.0",
      "tmScope": "source.js",
      "type": "programming",
      "vscodeLanguageIds": ["javascript", "mongo"]
    },
    {
      "aceMode": "javascript",
      "aliases": [],
      "codemirrorMimeType": "text/javascript",
      "codemirrorMode": "javascript",
      "color": "#f1e05a",
      "extensions": [".js.flow"],
      "filenames": [],
      "interpreters": ["chakra", "d8", "gjs", "js", "node", "nodejs", "qjs", "rhino", "v8", "v8-shell"],
      "linguistLanguageId": 183,
      "name": "Flow",
      "parsers": ["flow", "babel-flow"],
      "since": "0.0.0",
      "tmScope": "source.js",
      "type": "programming",
      "vscodeLanguageIds": ["javascript"]
    },
    {
      "aceMode": "javascript",
      "codemirrorMimeType": "text/jsx",
      "codemirrorMode": "jsx",
      "extensions": [".jsx"],
      "group": "JavaScript",
      "linguistLanguageId": 183,
      "name": "JSX",
      "parsers": ["babel", "babel-flow", "babel-ts", "flow", "typescript", "espree", "meriyah"],
      "since": "0.0.0",
      "tmScope": "source.js.jsx",
      "type": "programming",
      "vscodeLanguageIds": ["javascriptreact"]
    },
    {
      "aceMode": "typescript",
      "aliases": ["ts"],
      "codemirrorMimeType": "application/typescript",
      "codemirrorMode": "javascript",
      "color": "#2b7489",
      "extensions": [".ts", ".mts", ".cts"],
      "interpreters": ["deno", "ts-node"],
      "linguistLanguageId": 378,
      "name": "TypeScript",
      "parsers": ["typescript", "babel-ts"],
      "since": "1.4.0",
      "tmScope": "source.ts",
      "type": "programming",
      "vscodeLanguageIds": ["typescript"]
    },
    {
      "aceMode": "javascript",
      "codemirrorMimeType": "text/jsx",
      "codemirrorMode": "jsx",
      "extensions": [".tsx"],
      "group": "TypeScript",
      "linguistLanguageId": 94901924,
      "name": "TSX",
      "parsers": ["typescript", "babel-ts"],
      "since": "1.4.0",
      "tmScope": "source.tsx",
      "type": "programming",
      "vscodeLanguageIds": ["typescriptreact"]
    },
    {
      "aceMode": "json",
      "codemirrorMimeType": "application/json",
      "codemirrorMode": "javascript",
      "extensions": [],
      "filenames": ["package.json", "package-lock.json", "composer.json"],
      "linguistLanguageId": 174,
      "name": "JSON.stringify",
      "parsers": ["json-stringify"],
      "since": "1.13.0",
      "tmScope": "source.json",
      "type": "data",
      "vscodeLanguageIds": ["json"]
    },
    {
      "aceMode": "json",
      "codemirrorMimeType": "application/json",
      "codemirrorMode": "javascript",
      "extensions": [
        ".json",
        ".avsc",
        ".geojson",
        ".gltf",
        ".har",
        ".ice",
        ".JSON-tmLanguage",
        ".mcmeta",
        ".tfstate",
        ".tfstate.backup",
        ".topojson",
        ".webapp",
        ".webmanifest",
        ".yy",
        ".yyp"
      ],
      "filenames": [
        ".arcconfig",
        ".htmlhintrc",
        ".imgbotconfig",
        ".tern-config",
        ".tern-project",
        ".watchmanconfig",
        "Pipfile.lock",
        "composer.lock",
        "mcmod.info"
      ],
      "linguistLanguageId": 174,
      "name": "JSON",
      "parsers": ["json"],
      "since": "1.5.0",
      "tmScope": "source.json",
      "type": "data",
      "vscodeLanguageIds": ["json"]
    },
    {
      "aceMode": "javascript",
      "aliases": ["jsonc"],
      "codemirrorMimeType": "text/javascript",
      "codemirrorMode": "javascript",
      "extensions": [
        ".jsonc",
        ".sublime-build",
        ".sublime-commands",
        ".sublime-completions",
        ".sublime-keymap",
        ".sublime-macro",
        ".sublime-menu",
        ".sublime-mousemap",
        ".sublime-project",
        ".sublime-settings",
        ".sublime-theme",
        ".sublime-workspace",
        ".sublime_metrics",
        ".sublime_session"
      ],
      "filenames": [
        ".babelrc",
        ".eslintrc.json",
        ".jscsrc",
        ".jshintrc",
        ".jslintrc",
        "api-extractor.json",
        "devcontainer.json",
        "jsconfig.json",
        "language-configuration.json",
        "tsconfig.json",
        "tslint.json",
        ".eslintrc"
      ],
      "group": "JSON",
      "linguistLanguageId": 423,
      "name": "JSON with Comments",
      "parsers": ["json"],
      "since": "1.5.0",
      "tmScope": "source.js",
      "type": "data",
      "vscodeLanguageIds": ["jsonc"]
    },
    {
      "aceMode": "javascript",
      "codemirrorMimeType": "application/json",
      "codemirrorMode": "javascript",
      "extensions": [".json5"],
      "linguistLanguageId": 175,
      "name": "JSON5",
      "parsers": ["json5"],
      "since": "1.13.0",
      "tmScope": "source.js",
      "type": "data",
      "vscodeLanguageIds": ["json5"]
    },
    {
      "aceMode": "css",
      "codemirrorMimeType": "text/css",
      "codemirrorMode": "css",
      "color": "#563d7c",
      "extensions": [".css", ".wxss"],
      "linguistLanguageId": 50,
      "name": "CSS",
      "parsers": ["css"],
      "since": "1.4.0",
      "tmScope": "source.css",
      "type": "markup",
      "vscodeLanguageIds": ["css"]
    },
    {
      "aceMode": "text",
      "extensions": [".pcss", ".postcss"],
      "group": "CSS",
      "linguistLanguageId": 262764437,
      "name": "PostCSS",
      "parsers": ["css"],
      "since": "1.4.0",
      "tmScope": "source.postcss",
      "type": "markup",
      "vscodeLanguageIds": ["postcss"]
    },
    {
      "aceMode": "less",
      "codemirrorMimeType": "text/css",
      "codemirrorMode": "css",
      "color": "#1d365d",
      "extensions": [".less"],
      "linguistLanguageId": 198,
      "name": "Less",
      "parsers": ["less"],
      "since": "1.4.0",
      "tmScope": "source.css.less",
      "type": "markup",
      "vscodeLanguageIds": ["less"]
    },
    {
      "aceMode": "scss",
      "codemirrorMimeType": "text/x-scss",
      "codemirrorMode": "css",
      "color": "#c6538c",
      "extensions": [".scss"],
      "linguistLanguageId": 329,
      "name": "SCSS",
      "parsers": ["scss"],
      "since": "1.4.0",
      "tmScope": "source.css.scss",
      "type": "markup",
      "vscodeLanguageIds": ["scss"]
    },
    {
      "aceMode": "handlebars",
      "aliases": ["hbs", "htmlbars"],
      "color": "#f7931e",
      "extensions": [".handlebars", ".hbs"],
      "linguistLanguageId": 155,
      "name": "Handlebars",
      "parsers": ["glimmer"],
      "since": "2.3.0",
      "tmScope": "text.html.handlebars",
      "type": "markup",
      "vscodeLanguageIds": ["handlebars"]
    },
    {
      "aceMode": "text",
      "color": "#e10098",
      "extensions": [".graphql", ".gql", ".graphqls"],
      "linguistLanguageId": 139,
      "name": "GraphQL",
      "parsers": ["graphql"],
      "since": "1.5.0",
      "tmScope": "source.graphql",
      "type": "data",
      "vscodeLanguageIds": ["graphql"]
    },
    {
      "aceMode": "markdown",
      "aliases": ["pandoc"],
      "codemirrorMimeType": "text/x-gfm",
      "codemirrorMode": "gfm",
      "color": "#083fa1",
      "extensions": [".md", ".markdown", ".mdown", ".mdwn", ".mkd", ".mkdn", ".mkdown", ".ronn", ".scd", ".workbook"],
      "filenames": ["contents.lr", "README"],
      "linguistLanguageId": 222,
      "name": "Markdown",
      "parsers": ["markdown"],
      "since": "1.8.0",
      "tmScope": "source.gfm",
      "type": "prose",
      "vscodeLanguageIds": ["markdown"],
      "wrap": true
    },
    {
      "aceMode": "markdown",
      "aliases": ["pandoc"],
      "codemirrorMimeType": "text/x-gfm",
      "codemirrorMode": "gfm",
      "color": "#083fa1",
      "extensions": [".mdx"],
      "filenames": [],
      "linguistLanguageId": 222,
      "name": "MDX",
      "parsers": ["mdx"],
      "since": "1.15.0",
      "tmScope": "source.gfm",
      "type": "prose",
      "vscodeLanguageIds": ["mdx"],
      "wrap": true
    },
    {
      "aceMode": "html",
      "aliases": ["xhtml"],
      "codemirrorMimeType": "text/html",
      "codemirrorMode": "htmlmixed",
      "color": "#e34c26",
      "extensions": [".component.html"],
      "filenames": [],
      "linguistLanguageId": 146,
      "name": "Angular",
      "parsers": ["angular"],
      "since": "1.15.0",
      "tmScope": "text.html.basic",
      "type": "markup",
      "vscodeLanguageIds": ["html"]
    },
    {
      "aceMode": "html",
      "aliases": ["xhtml"],
      "codemirrorMimeType": "text/html",
      "codemirrorMode": "htmlmixed",
      "color": "#e34c26",
      "extensions": [".html", ".htm", ".html.hl", ".inc", ".xht", ".xhtml", ".mjml"],
      "linguistLanguageId": 146,
      "name": "HTML",
      "parsers": ["html"],
      "since": "1.15.0",
      "tmScope": "text.html.basic",
      "type": "markup",
      "vscodeLanguageIds": ["html"]
    },
    {
      "aceMode": "html",
      "aliases": ["xhtml"],
      "codemirrorMimeType": "text/html",
      "codemirrorMode": "htmlmixed",
      "color": "#e34c26",
      "extensions": [],
      "filenames": [],
      "linguistLanguageId": 146,
      "name": "Lightning Web Components",
      "parsers": ["lwc"],
      "since": "1.17.0",
      "tmScope": "text.html.basic",
      "type": "markup",
      "vscodeLanguageIds": ["html"]
    },
    {
      "aceMode": "html",
      "color": "#41b883",
      "extensions": [".vue"],
      "linguistLanguageId": 391,
      "name": "Vue",
      "parsers": ["vue"],
      "since": "1.10.0",
      "tmScope": "text.html.vue",
      "type": "markup",
      "vscodeLanguageIds": ["vue"]
    },
    {
      "aceMode": "yaml",
      "aliases": ["yml"],
      "codemirrorMimeType": "text/x-yaml",
      "codemirrorMode": "yaml",
      "color": "#cb171e",
      "extensions": [
        ".yml",
        ".mir",
        ".reek",
        ".rviz",
        ".sublime-syntax",
        ".syntax",
        ".yaml",
        ".yaml-tmlanguage",
        ".yaml.sed",
        ".yml.mysql"
      ],
      "filenames": [".clang-format", ".clang-tidy", ".gemrc", "glide.lock", ".prettierrc", ".stylelintrc"],
      "linguistLanguageId": 407,
      "name": "YAML",
      "parsers": ["yaml"],
      "since": "1.14.0",
      "tmScope": "source.yaml",
      "type": "data",
      "vscodeLanguageIds": ["yaml", "ansible", "home-assistant"]
    },
    {
      "extensions": [".go.html", ".gohtml", ".gotmpl", ".go.tmpl", ".tmpl", ".tpl", ".html.tmpl", ".html.tpl"],
      "name": "GoTemplate",
      "parsers": ["go-template"],
      "vscodeLanguageIds": ["gotemplate", "gohtml", "GoTemplate", "GoHTML"]
    },
    {
      "aceMode": "html",
      "codemirrorMimeType": "text/x-java",
      "codemirrorMode": "clike",
      "extensions": [".java"],
      "group": "Java",
      "linguistLanguageId": 181,
      "name": "Java",
      "parsers": ["java"],
      "tmScope": "text.html.vue",
      "vscodeLanguageIds": ["java"]
    },
    {
      "aceMode": "properties",
      "aliases": ["properties"],
      "codemirrorMimeType": "text/x-properties",
      "codemirrorMode": "properties",
      "extensions": [".properties"],
      "linguistLanguageId": 519377561,
      "name": "Java Properties",
      "parsers": ["dot-properties"],
      "tmScope": "source.java-properties",
      "vscodeLanguageIds": ["properties"]
    },
    {
      "aceMode": "sh",
      "aliases": ["abuild", "apkbuild"],
      "codemirrorMimeType": "text/x-sh",
      "codemirrorMode": "shell",
      "filenames": ["APKBUILD"],
      "group": "Shell",
      "linguistLanguageId": 14,
      "name": "Alpine Abuild",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.shell",
      "vscodeLanguageIds": ["shellscript"]
    },
    {
      "aceMode": "ini",
      "aliases": ["altium"],
      "extensions": [".OutJob", ".PcbDoc", ".PrjPCB", ".SchDoc"],
      "linguistLanguageId": 187772328,
      "name": "Altium Designer",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.ini",
      "vscodeLanguageIds": ["ini"]
    },
    {
      "aceMode": "gitignore",
      "filenames": ["CODEOWNERS"],
      "linguistLanguageId": 321684729,
      "name": "CODEOWNERS",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "text.codeowners",
      "vscodeLanguageIds": ["gitignore"]
    },
    {
      "aceMode": "dockerfile",
      "aliases": ["Containerfile"],
      "codemirrorMimeType": "text/x-dockerfile",
      "codemirrorMode": "dockerfile",
      "extensions": [".dockerfile"],
      "filenames": ["Containerfile", "Dockerfile"],
      "linguistLanguageId": 89,
      "name": "Dockerfile",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.dockerfile",
      "vscodeLanguageIds": ["dockerfile"]
    },
    {
      "aceMode": "ini",
      "aliases": ["editor-config"],
      "codemirrorMimeType": "text/x-properties",
      "codemirrorMode": "properties",
      "filenames": [".editorconfig"],
      "group": "INI",
      "linguistLanguageId": 96139566,
      "name": "EditorConfig",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.editorconfig",
      "vscodeLanguageIds": ["ini"]
    },
    {
      "aceMode": "sh",
      "codemirrorMimeType": "text/x-sh",
      "codemirrorMode": "shell",
      "extensions": [".ebuild"],
      "group": "Shell",
      "linguistLanguageId": 127,
      "name": "Gentoo Ebuild",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.shell",
      "vscodeLanguageIds": ["shellscript"]
    },
    {
      "aceMode": "sh",
      "codemirrorMimeType": "text/x-sh",
      "codemirrorMode": "shell",
      "extensions": [".eclass"],
      "group": "Shell",
      "linguistLanguageId": 128,
      "name": "Gentoo Eclass",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.shell",
      "vscodeLanguageIds": ["shellscript"]
    },
    {
      "aceMode": "gitignore",
      "aliases": ["gitattributes"],
      "codemirrorMimeType": "text/x-sh",
      "codemirrorMode": "shell",
      "filenames": [".gitattributes"],
      "group": "INI",
      "linguistLanguageId": 956324166,
      "name": "Git Attributes",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.gitattributes",
      "vscodeLanguageIds": ["gitignore"]
    },
    {
      "aceMode": "ini",
      "aliases": ["gitconfig", "gitmodules"],
      "codemirrorMimeType": "text/x-properties",
      "codemirrorMode": "properties",
      "extensions": [".gitconfig"],
      "filenames": [".gitconfig", ".gitmodules"],
      "group": "INI",
      "linguistLanguageId": 807968997,
      "name": "Git Config",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.gitconfig",
      "vscodeLanguageIds": ["ini"]
    },
    {
      "aceMode": "ini",
      "aliases": ["dosini"],
      "codemirrorMimeType": "text/x-properties",
      "codemirrorMode": "properties",
      "extensions": [".ini", ".cfg", ".dof", ".lektorproject", ".prefs", ".pro", ".properties"],
      "filenames": ["buildozer.spec"],
      "linguistLanguageId": 163,
      "name": "INI",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.ini",
      "vscodeLanguageIds": ["ini"]
    },
    {
      "aceMode": "gitignore",
      "aliases": ["ignore", "gitignore", "git-ignore"],
      "codemirrorMimeType": "text/x-sh",
      "codemirrorMode": "shell",
      "extensions": [".gitignore"],
      "filenames": [
        ".atomignore",
        ".babelignore",
        ".bzrignore",
        ".coffeelintignore",
        ".cvsignore",
        ".dockerignore",
        ".eleventyignore",
        ".eslintignore",
        ".gitignore",
        ".markdownlintignore",
        ".nodemonignore",
        ".npmignore",
        ".prettierignore",
        ".stylelintignore",
        ".vscodeignore",
        "gitignore-global",
        "gitignore_global"
      ],
      "group": "INI",
      "linguistLanguageId": 74444240,
      "name": "Ignore List",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.gitignore",
      "vscodeLanguageIds": ["gitignore"]
    },
    {
      "aceMode": "properties",
      "codemirrorMimeType": "text/x-properties",
      "codemirrorMode": "properties",
      "extensions": [".properties"],
      "linguistLanguageId": 519377561,
      "name": "Java Properties",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.java-properties",
      "vscodeLanguageIds": ["properties"]
    },
    {
      "aceMode": "sh",
      "aliases": ["openrc"],
      "codemirrorMimeType": "text/x-sh",
      "codemirrorMode": "shell",
      "group": "Shell",
      "interpreters": ["openrc-run"],
      "linguistLanguageId": 265,
      "name": "OpenRC runscript",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.shell",
      "vscodeLanguageIds": ["shellscript"]
    },
    {
      "aceMode": "sh",
      "aliases": ["sh", "shell-script", "bash", "zsh"],
      "codemirrorMimeType": "text/x-sh",
      "codemirrorMode": "shell",
      "extensions": [
        ".sh",
        ".bash",
        ".bats",
        ".cgi",
        ".command",
        ".env",
        ".fcgi",
        ".ksh",
        ".sh.in",
        ".tmux",
        ".tool",
        ".zsh"
      ],
      "filenames": [
        ".bash_aliases",
        ".bash_history",
        ".bash_logout",
        ".bash_profile",
        ".bashrc",
        ".cshrc",
        ".env",
        ".env.example",
        ".flaskenv",
        ".login",
        ".profile",
        ".zlogin",
        ".zlogout",
        ".zprofile",
        ".zshenv",
        ".zshrc",
        "9fs",
        "PKGBUILD",
        "bash_aliases",
        "bash_logout",
        "bash_profile",
        "bashrc",
        "cshrc",
        "gradlew",
        "login",
        "man",
        "profile",
        "zlogin",
        "zlogout",
        "zprofile",
        "zshenv",
        "zshrc"
      ],
      "interpreters": ["ash", "bash", "dash", "ksh", "mksh", "pdksh", "rc", "sh", "zsh"],
      "linguistLanguageId": 346,
      "name": "Shell",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.shell",
      "vscodeLanguageIds": ["shellscript"]
    },
    {
      "aceMode": "sh",
      "aliases": ["bash session", "console"],
      "codemirrorMimeType": "text/x-sh",
      "codemirrorMode": "shell",
      "extensions": [".sh-session"],
      "linguistLanguageId": 347,
      "name": "ShellSession",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "text.shell-session",
      "vscodeLanguageIds": ["shellscript"]
    },
    {
      "aceMode": "sh",
      "codemirrorMimeType": "text/x-sh",
      "codemirrorMode": "shell",
      "extensions": [".tcsh", ".csh"],
      "group": "Shell",
      "interpreters": ["tcsh", "csh"],
      "linguistLanguageId": 368,
      "name": "Tcsh",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.shell",
      "vscodeLanguageIds": ["shellscript"]
    },
    {
      "aceMode": "properties",
      "aliases": ["tm-properties"],
      "codemirrorMimeType": "text/x-properties",
      "codemirrorMode": "properties",
      "filenames": [".tm_properties"],
      "linguistLanguageId": 981795023,
      "name": "TextMate Properties",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.tm-properties",
      "vscodeLanguageIds": ["properties"]
    },
    {
      "aceMode": "ini",
      "codemirrorMimeType": "text/x-properties",
      "codemirrorMode": "properties",
      "extensions": [".reg"],
      "linguistLanguageId": 969674868,
      "name": "Windows Registry Entries",
      "parsers": ["sh"],
      "since": "0.1.0",
      "tmScope": "source.reg",
      "vscodeLanguageIds": ["ini"]
    },
    {
      "extensions": [".vmoptions"],
      "filenames": ["jvm.options"],
      "name": "JvmOptions",
      "parsers": ["sh"],
      "since": "0.1.0",
      "vscodeLanguageIds": ["jvmoptions"]
    },
    {
      "filenames": ["hosts"],
      "name": "hosts",
      "parsers": ["sh"],
      "since": "0.1.0",
      "vscodeLanguageIds": ["hosts"]
    },
    {
      "extensions": [".env"],
      "filenames": [".env.*"],
      "name": "dotenv",
      "parsers": ["sh"],
      "since": "0.1.0",
      "vscodeLanguageIds": ["dotenv"]
    },
    {
      "aceMode": "toml",
      "codemirrorMimeType": "text/x-toml",
      "codemirrorMode": "toml",
      "extensions": [".toml"],
      "filenames": ["Cargo.lock", "Gopkg.lock"],
      "language_id": 365,
      "name": "Toml",
      "parsers": ["toml"],
      "tmScope": "source.toml",
      "type": "data"
    },
    {
      "aceMode": "php",
      "aliases": ["inc"],
      "codemirrorMimeType": "application/x-httpd-php",
      "codemirrorMode": "php",
      "color": "#4F5D95",
      "extensions": [".php", ".aw", ".ctp", ".fcgi", ".inc", ".php3", ".php4", ".php5", ".phps", ".phpt"],
      "filenames": [".php", ".php_cs", ".php_cs.dist", "Phakefile"],
      "interpreters": ["php"],
      "linguistLanguageId": 272,
      "name": "PHP",
      "parsers": ["php"],
      "tmScope": "text.html.php",
      "type": "programming",
      "vscodeLanguageIds": ["php"]
    },
    {
      "aceMode": "php",
      "codemirrorMimeType": "application/x-httpd-php",
      "codemirrorMode": "php",
      "extensions": [".phtml"],
      "group": "HTML",
      "linguistLanguageId": 151,
      "name": "HTML+PHP",
      "parsers": ["php"],
      "tmScope": "text.html.php",
      "type": "markup",
      "vscodeLanguageIds": ["php"]
    },
    {
      "extensions": [
        ".arb",
        ".axlsx",
        ".builder",
        ".eye",
        ".fcgi",
        ".gemfile",
        ".gemspec",
        ".god",
        ".jb",
        ".jbuilder",
        ".mspec",
        ".opal",
        ".pluginspec",
        ".podspec",
        ".rabl",
        ".rake",
        ".rb",
        ".rbi",
        ".rbuild",
        ".rbw",
        ".rbx",
        ".ru",
        ".ruby",
        ".thor",
        ".watchr"
      ],
      "filenames": [
        ".irbrc",
        ".pryrc",
        ".simplecov",
        "Appraisals",
        "Berksfile",
        "Brewfile",
        "Buildfile",
        "Capfile",
        "Cheffile",
        "Dangerfile",
        "Deliverfile",
        "Fastfile",
        "Gemfile",
        "Guardfile",
        "Jarfile",
        "Mavenfile",
        "Podfile",
        "Puppetfile",
        "Rakefile",
        "Snapfile",
        "Thorfile",
        "Vagabondfile",
        "Vagrantfile",
        "buildfile"
      ],
      "interpreters": ["jruby", "macruby", "rake", "rbx", "ruby"],
      "linguistLanguageId": 326,
      "name": "Ruby",
      "parsers": ["ruby"],
      "vscodeLanguageIds": ["ruby"]
    },
    { "extensions": [".rbs"], "name": "RBS", "parsers": ["rbs"] },
    {
      "extensions": [".haml"],
      "name": "HAML",
      "parsers": ["haml"],
      "vscodeLanguageIds": ["haml"]
    },
    {
      "aliases": ["rss", "xsd", "wsdl"],
      "extensions": [
        ".xml",
        ".adml",
        ".admx",
        ".ant",
        ".axml",
        ".builds",
        ".ccproj",
        ".ccxml",
        ".clixml",
        ".cproject",
        ".cscfg",
        ".csdef",
        ".csl",
        ".csproj",
        ".ct",
        ".depproj",
        ".dita",
        ".ditamap",
        ".ditaval",
        ".dll.config",
        ".dotsettings",
        ".filters",
        ".fsproj",
        ".fxml",
        ".glade",
        ".gml",
        ".gmx",
        ".grxml",
        ".iml",
        ".inx",
        ".ivy",
        ".jelly",
        ".jsproj",
        ".kml",
        ".launch",
        ".mdpolicy",
        ".mjml",
        ".mm",
        ".mod",
        ".mxml",
        ".natvis",
        ".ncl",
        ".ndproj",
        ".nproj",
        ".nuspec",
        ".odd",
        ".osm",
        ".pkgproj",
        ".pluginspec",
        ".proj",
        ".props",
        ".ps1xml",
        ".psc1",
        ".pt",
        ".rdf",
        ".resx",
        ".rss",
        ".sch",
        ".scxml",
        ".sfproj",
        ".shproj",
        ".srdf",
        ".storyboard",
        ".sublime-snippet",
        ".targets",
        ".tml",
        ".ts",
        ".tsx",
        ".ui",
        ".urdf",
        ".ux",
        ".vbproj",
        ".vcxproj",
        ".vsixmanifest",
        ".vssettings",
        ".vstemplate",
        ".vxml",
        ".wixproj",
        ".workflow",
        ".wsdl",
        ".wsf",
        ".wxi",
        ".wxl",
        ".wxs",
        ".x3d",
        ".xacro",
        ".xaml",
        ".xib",
        ".xlf",
        ".xliff",
        ".xmi",
        ".xml.dist",
        ".xproj",
        ".xsd",
        ".xspec",
        ".xul",
        ".zcml"
      ],
      "filenames": [
        ".classpath",
        ".cproject",
        ".project",
        "App.config",
        "NuGet.config",
        "Settings.StyleCop",
        "Web.Debug.config",
        "Web.Release.config",
        "Web.config",
        "packages.config"
      ],
      "linguistLanguageId": 399,
      "name": "XML",
      "parsers": ["xml"],
      "vscodeLanguageIds": ["xml", "forcesourcemanifest"]
    },
    {
      "extensions": [".svg"],
      "linguistLanguageId": 337,
      "name": "SVG",
      "parsers": ["xml"],
      "vscodeLanguageIds": ["svg"]
    }
  ],
  "options": [
    {
      "category": "JavaScript",
      "choices": [
        {
          "description": "Always include parens. Example: `(x) => x`",
          "value": "always"
        },
        {
          "description": "Omit parens when possible. Example: `x => x`",
          "value": "avoid"
        }
      ],
      "default": "always",
      "description": "Include parentheses around a sole arrow function parameter.",
      "name": "arrowParens",
      "pluginDefaults": {},
      "since": "1.9.0",
      "type": "choice"
    },
    {
      "category": "Output",
      "default": true,
      "description": "BinaryNextLine will make binary operators appear on the next line when a binary command, such as a pipe, spans multiple lines. A backslash will be used.",
      "name": "binaryNextLine",
      "pluginDefaults": {},
      "since": "0.1.0",
      "type": "boolean"
    },
    {
      "category": "PHP",
      "choices": [
        { "description": "Use PSR-2 brace style.", "value": "psr-2" },
        { "description": "Use 1tbs brace style.", "value": "1tbs" }
      ],
      "default": "psr-2",
      "description": "Print one space or newline for code blocks (classes and functions).",
      "name": "braceStyle",
      "pluginDefaults": {},
      "since": "0.10.0",
      "type": "choice"
    },
    {
      "category": "Common",
      "default": false,
      "description": "Put > of opening tags on the last line instead of on a new line.",
      "name": "bracketSameLine",
      "pluginDefaults": {},
      "since": "2.4.0",
      "type": "boolean"
    },
    {
      "category": "Common",
      "default": true,
      "description": "Print spaces between brackets.",
      "name": "bracketSpacing",
      "oppositeDescription": "Do not print spaces between brackets.",
      "pluginDefaults": {},
      "since": "0.0.0",
      "type": "boolean"
    },
    {
      "category": "Special",
      "default": -1,
      "description": "Print (to stderr) where a cursor at the given position would move to after formatting.\nThis option cannot be used with --range-start and --range-end.",
      "name": "cursorOffset",
      "pluginDefaults": {},
      "range": { "end": null, "start": -1, "step": 1 },
      "since": "1.4.0",
      "type": "int"
    },
    {
      "category": "Global",
      "choices": [
        {
          "description": "Format embedded code if Prettier can automatically identify it.",
          "value": "auto"
        },
        {
          "description": "Never automatically format embedded code.",
          "value": "off"
        }
      ],
      "default": "auto",
      "description": "Control how Prettier formats quoted code embedded in the file.",
      "name": "embeddedLanguageFormatting",
      "pluginDefaults": {},
      "since": "2.1.0",
      "type": "choice"
    },
    {
      "category": "Global",
      "choices": [
        {
          "description": "Line Feed only (\\n), common on Linux and macOS as well as inside git repos",
          "value": "lf"
        },
        {
          "description": "Carriage Return + Line Feed characters (\\r\\n), common on Windows",
          "value": "crlf"
        },
        {
          "description": "Carriage Return character only (\\r), used very rarely",
          "value": "cr"
        },
        {
          "description": "Maintain existing\n(mixed values within one file are normalised by looking at what's used after the first line)",
          "value": "auto"
        }
      ],
      "default": "lf",
      "description": "Which end of line characters to apply.",
      "name": "endOfLine",
      "pluginDefaults": {},
      "since": "1.15.0",
      "type": "choice"
    },
    {
      "category": "Global",
      "choices": [
        { "value": "arrayInitializer" },
        { "value": "variableInitializerList" },
        { "value": "block" },
        { "value": "blockStatements" },
        { "value": "blockStatement" },
        { "value": "localVariableDeclarationStatement" },
        { "value": "localVariableDeclaration" },
        { "value": "localVariableType" },
        { "value": "statement" },
        { "value": "statementWithoutTrailingSubstatement" },
        { "value": "emptyStatement" },
        { "value": "labeledStatement" },
        { "value": "expressionStatement" },
        { "value": "statementExpression" },
        { "value": "ifStatement" },
        { "value": "assertStatement" },
        { "value": "switchStatement" },
        { "value": "switchBlock" },
        { "value": "switchBlockStatementGroup" },
        { "value": "switchLabel" },
        { "value": "caseOrDefaultLabel" },
        { "value": "caseLabelElement" },
        { "value": "switchRule" },
        { "value": "caseConstant" },
        { "value": "whileStatement" },
        { "value": "doStatement" },
        { "value": "forStatement" },
        { "value": "basicForStatement" },
        { "value": "forInit" },
        { "value": "forUpdate" },
        { "value": "statementExpressionList" },
        { "value": "enhancedForStatement" },
        { "value": "breakStatement" },
        { "value": "continueStatement" },
        { "value": "returnStatement" },
        { "value": "throwStatement" },
        { "value": "synchronizedStatement" },
        { "value": "tryStatement" },
        { "value": "catches" },
        { "value": "catchClause" },
        { "value": "catchFormalParameter" },
        { "value": "catchType" },
        { "value": "finally" },
        { "value": "tryWithResourcesStatement" },
        { "value": "resourceSpecification" },
        { "value": "resourceList" },
        { "value": "resource" },
        { "value": "resourceInit" },
        { "value": "yieldStatement" },
        { "value": "variableAccess" },
        { "value": "isBasicForStatement" },
        { "value": "isLocalVariableDeclaration" },
        { "value": "isClassicSwitchLabel" },
        { "value": "classDeclaration" },
        { "value": "normalClassDeclaration" },
        { "value": "classModifier" },
        { "value": "typeParameters" },
        { "value": "typeParameterList" },
        { "value": "superclass" },
        { "value": "superinterfaces" },
        { "value": "interfaceTypeList" },
        { "value": "classPermits" },
        { "value": "classBody" },
        { "value": "classBodyDeclaration" },
        { "value": "classMemberDeclaration" },
        { "value": "fieldDeclaration" },
        { "value": "fieldModifier" },
        { "value": "variableDeclaratorList" },
        { "value": "variableDeclarator" },
        { "value": "variableDeclaratorId" },
        { "value": "variableInitializer" },
        { "value": "unannType" },
        { "value": "unannPrimitiveTypeWithOptionalDimsSuffix" },
        { "value": "unannPrimitiveType" },
        { "value": "unannReferenceType" },
        { "value": "unannClassOrInterfaceType" },
        { "value": "unannClassType" },
        { "value": "unannInterfaceType" },
        { "value": "unannTypeVariable" },
        { "value": "methodDeclaration" },
        { "value": "methodModifier" },
        { "value": "methodHeader" },
        { "value": "result" },
        { "value": "methodDeclarator" },
        { "value": "receiverParameter" },
        { "value": "formalParameterList" },
        { "value": "formalParameter" },
        { "value": "variableParaRegularParameter" },
        { "value": "variableArityParameter" },
        { "value": "variableModifier" },
        { "value": "throws" },
        { "value": "exceptionTypeList" },
        { "value": "exceptionType" },
        { "value": "methodBody" },
        { "value": "instanceInitializer" },
        { "value": "staticInitializer" },
        { "value": "constructorDeclaration" },
        { "value": "constructorModifier" },
        { "value": "constructorDeclarator" },
        { "value": "simpleTypeName" },
        { "value": "constructorBody" },
        { "value": "explicitConstructorInvocation" },
        { "value": "unqualifiedExplicitConstructorInvocation" },
        { "value": "qualifiedExplicitConstructorInvocation" },
        { "value": "enumDeclaration" },
        { "value": "enumBody" },
        { "value": "enumConstantList" },
        { "value": "enumConstant" },
        { "value": "enumConstantModifier" },
        { "value": "enumBodyDeclarations" },
        { "value": "recordDeclaration" },
        { "value": "recordHeader" },
        { "value": "recordComponentList" },
        { "value": "recordComponent" },
        { "value": "variableArityRecordComponent" },
        { "value": "recordComponentModifier" },
        { "value": "recordBody" },
        { "value": "recordBodyDeclaration" },
        { "value": "compactConstructorDeclaration" },
        { "value": "isClassDeclaration" },
        { "value": "identifyClassBodyDeclarationType" },
        { "value": "isDims" },
        { "value": "isCompactConstructorDeclaration" },
        { "value": "expression" },
        { "value": "lambdaExpression" },
        { "value": "lambdaParameters" },
        { "value": "lambdaParametersWithBraces" },
        { "value": "lambdaParameterList" },
        { "value": "inferredLambdaParameterList" },
        { "value": "explicitLambdaParameterList" },
        { "value": "lambdaParameter" },
        { "value": "regularLambdaParameter" },
        { "value": "lambdaParameterType" },
        { "value": "lambdaBody" },
        { "value": "ternaryExpression" },
        { "value": "binaryExpression" },
        { "value": "unaryExpression" },
        { "value": "unaryExpressionNotPlusMinus" },
        { "value": "primary" },
        { "value": "primaryPrefix" },
        { "value": "primarySuffix" },
        { "value": "fqnOrRefType" },
        { "value": "fqnOrRefTypePartRest" },
        { "value": "fqnOrRefTypePartCommon" },
        { "value": "fqnOrRefTypePartFirst" },
        { "value": "parenthesisExpression" },
        { "value": "castExpression" },
        { "value": "primitiveCastExpression" },
        { "value": "referenceTypeCastExpression" },
        { "value": "newExpression" },
        { "value": "unqualifiedClassInstanceCreationExpression" },
        { "value": "classOrInterfaceTypeToInstantiate" },
        { "value": "typeArgumentsOrDiamond" },
        { "value": "diamond" },
        { "value": "methodInvocationSuffix" },
        { "value": "argumentList" },
        { "value": "arrayCreationExpression" },
        { "value": "arrayCreationDefaultInitSuffix" },
        { "value": "arrayCreationExplicitInitSuffix" },
        { "value": "dimExprs" },
        { "value": "dimExpr" },
        { "value": "classLiteralSuffix" },
        { "value": "arrayAccessSuffix" },
        { "value": "methodReferenceSuffix" },
        { "value": "pattern" },
        { "value": "typePattern" },
        { "value": "identifyNewExpressionType" },
        { "value": "isLambdaExpression" },
        { "value": "isCastExpression" },
        { "value": "isPrimitiveCastExpression" },
        { "value": "isReferenceTypeCastExpression" },
        { "value": "isRefTypeInMethodRef" },
        { "value": "interfaceDeclaration" },
        { "value": "normalInterfaceDeclaration" },
        { "value": "interfaceModifier" },
        { "value": "extendsInterfaces" },
        { "value": "interfacePermits" },
        { "value": "interfaceBody" },
        { "value": "interfaceMemberDeclaration" },
        { "value": "constantDeclaration" },
        { "value": "constantModifier" },
        { "value": "interfaceMethodDeclaration" },
        { "value": "interfaceMethodModifier" },
        { "value": "annotationTypeDeclaration" },
        { "value": "annotationTypeBody" },
        { "value": "annotationTypeMemberDeclaration" },
        { "value": "annotationTypeElementDeclaration" },
        { "value": "annotationTypeElementModifier" },
        { "value": "defaultValue" },
        { "value": "annotation" },
        { "value": "elementValuePairList" },
        { "value": "elementValuePair" },
        { "value": "elementValue" },
        { "value": "elementValueArrayInitializer" },
        { "value": "elementValueList" },
        { "value": "identifyInterfaceBodyDeclarationType" },
        { "value": "identifyAnnotationBodyDeclarationType" },
        { "value": "isSimpleElementValueAnnotation" },
        { "value": "literal" },
        { "value": "integerLiteral" },
        { "value": "floatingPointLiteral" },
        { "value": "booleanLiteral" },
        { "value": "moduleName" },
        { "value": "packageName" },
        { "value": "typeName" },
        { "value": "expressionName" },
        { "value": "methodName" },
        { "value": "packageOrTypeName" },
        { "value": "ambiguousName" },
        { "value": "compilationUnit" },
        { "value": "ordinaryCompilationUnit" },
        { "value": "modularCompilationUnit" },
        { "value": "packageDeclaration" },
        { "value": "packageModifier" },
        { "value": "importDeclaration" },
        { "value": "typeDeclaration" },
        { "value": "moduleDeclaration" },
        { "value": "moduleDirective" },
        { "value": "requiresModuleDirective" },
        { "value": "exportsModuleDirective" },
        { "value": "opensModuleDirective" },
        { "value": "usesModuleDirective" },
        { "value": "providesModuleDirective" },
        { "value": "requiresModifier" },
        { "value": "isModuleCompilationUnit" },
        { "value": "primitiveType" },
        { "value": "numericType" },
        { "value": "integralType" },
        { "value": "floatingPointType" },
        { "value": "referenceType" },
        { "value": "classOrInterfaceType" },
        { "value": "classType" },
        { "value": "interfaceType" },
        { "value": "typeVariable" },
        { "value": "dims" },
        { "value": "typeParameter" },
        { "value": "typeParameterModifier" },
        { "value": "typeBound" },
        { "value": "additionalBound" },
        { "value": "typeArguments" },
        { "value": "typeArgumentList" },
        { "value": "typeArgument" },
        { "value": "wildcard" },
        { "value": "wildcardBounds" }
      ],
      "default": "compilationUnit",
      "description": "Prettify from the entrypoint, allowing to use prettier on snippet.",
      "name": "entrypoint",
      "pluginDefaults": {},
      "type": "choice"
    },
    {
      "category": "Format",
      "default": false,
      "description": "Escape with \\u all non-Latin-1 characters, to allow safely encoding as ISO-8859-1",
      "name": "escapeNonLatin1",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "Special",
      "description": "Specify the input filepath. This will be used to do parser inference.",
      "name": "filepath",
      "pluginDefaults": {},
      "since": "1.4.0",
      "type": "path"
    },
    {
      "category": "Format",
      "default": false,
      "description": "FunctionNextLine will place a function's opening braces on the next line.",
      "name": "functionNextLine",
      "pluginDefaults": {},
      "since": "0.1.0",
      "type": "boolean"
    },
    {
      "category": "Global",
      "default": true,
      "description": "Specifies whether the brackets should have spacing around the statement.",
      "name": "goTemplateBracketSpacing",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "HTML",
      "choices": [
        {
          "description": "Respect the default value of CSS display property.",
          "value": "css"
        },
        {
          "description": "Whitespaces are considered sensitive.",
          "value": "strict"
        },
        {
          "description": "Whitespaces are considered insensitive.",
          "value": "ignore"
        }
      ],
      "default": "css",
      "description": "How to handle whitespaces in HTML.",
      "name": "htmlWhitespaceSensitivity",
      "pluginDefaults": {},
      "since": "1.15.0",
      "type": "choice"
    },
    {
      "category": "Format",
      "description": "Indent sets the number of spaces used for indentation. If set to 0, tabs will be used instead.",
      "name": "indent",
      "pluginDefaults": {},
      "since": "0.1.0",
      "type": "int"
    },
    {
      "category": "Special",
      "default": false,
      "description": "Insert @format pragma into file's first docblock comment.",
      "name": "insertPragma",
      "pluginDefaults": {},
      "since": "1.8.0",
      "type": "boolean"
    },
    {
      "category": "JavaScript",
      "default": false,
      "description": "Use single quotes in JSX.",
      "name": "jsxSingleQuote",
      "pluginDefaults": {},
      "since": "1.15.0",
      "type": "boolean"
    },
    {
      "category": "Output",
      "default": true,
      "description": "KeepComments makes the parser parse comments and attach them to nodes, as opposed to discarding them.",
      "name": "keepComments",
      "pluginDefaults": {},
      "since": "0.1.0",
      "type": "boolean"
    },
    {
      "category": "Format",
      "default": false,
      "description": "KeepPadding will keep most nodes and tokens in the same column that they were in the original source. This allows the user to decide how to align and pad their code with spaces.\nNote that this feature is best-effort and will only keep the alignment stable, so it may need some human help the first time it is run.",
      "name": "keepPadding",
      "pluginDefaults": {},
      "since": "0.1.0",
      "type": "boolean"
    },
    {
      "category": "Format",
      "choices": [
        { "value": " " },
        { "value": ":" },
        { "value": "=" },
        { "value": ": " },
        { "value": "= " },
        { "value": " : " },
        { "value": " = " }
      ],
      "default": " = ",
      "description": "The separator to use between a property key and its value",
      "name": "keySeparator",
      "pluginDefaults": {},
      "type": "choice"
    },
    {
      "category": "Output",
      "default": false,
      "description": "Minify will print programs in a way to save the most bytes possible. For example, indentation and comments are skipped, and extra whitespace is avoided when possible.",
      "name": "minify",
      "pluginDefaults": {},
      "since": "0.1.0",
      "type": "boolean"
    },
    {
      "category": "Global",
      "choices": [
        { "description": "Flow", "value": "flow" },
        { "description": "JavaScript", "since": "1.16.0", "value": "babel" },
        { "description": "Flow", "since": "1.16.0", "value": "babel-flow" },
        { "description": "TypeScript", "since": "2.0.0", "value": "babel-ts" },
        {
          "description": "TypeScript",
          "since": "1.4.0",
          "value": "typescript"
        },
        { "description": "JavaScript", "since": "2.2.0", "value": "espree" },
        { "description": "JavaScript", "since": "2.2.0", "value": "meriyah" },
        { "description": "CSS", "since": "1.7.1", "value": "css" },
        { "description": "Less", "since": "1.7.1", "value": "less" },
        { "description": "SCSS", "since": "1.7.1", "value": "scss" },
        { "description": "JSON", "since": "1.5.0", "value": "json" },
        { "description": "JSON5", "since": "1.13.0", "value": "json5" },
        {
          "description": "JSON.stringify",
          "since": "1.13.0",
          "value": "json-stringify"
        },
        { "description": "GraphQL", "since": "1.5.0", "value": "graphql" },
        { "description": "Markdown", "since": "1.8.0", "value": "markdown" },
        { "description": "MDX", "since": "1.15.0", "value": "mdx" },
        { "description": "Vue", "since": "1.10.0", "value": "vue" },
        { "description": "YAML", "since": "1.14.0", "value": "yaml" },
        {
          "description": "Ember / Handlebars",
          "since": "2.3.0",
          "value": "glimmer"
        },
        { "description": "HTML", "since": "1.15.0", "value": "html" },
        { "description": "Angular", "since": "1.15.0", "value": "angular" },
        {
          "description": "Lightning Web Components",
          "since": "1.17.0",
          "value": "lwc"
        },
        {
          "description": "GoTemplate (plugin: prettier-plugin-go-template)",
          "value": "go-template"
        },
        {
          "description": "Java (plugin: prettier-plugin-java)",
          "value": "java"
        },
        {
          "description": "Java Properties (plugin: prettier-plugin-properties)",
          "value": "dot-properties"
        },
        {
          "description": "Alpine Abuild (plugin: prettier-plugin-sh)",
          "value": "sh"
        },
        {
          "description": "Toml (plugin: prettier-plugin-toml)",
          "value": "toml"
        },
        { "description": "PHP (plugin: @prettier/plugin-php)", "value": "php" },
        {
          "description": "Ruby (plugin: @prettier/plugin-ruby)",
          "value": "ruby"
        },
        {
          "description": "RBS (plugin: @prettier/plugin-ruby)",
          "value": "rbs"
        },
        {
          "description": "HAML (plugin: @prettier/plugin-ruby)",
          "value": "haml"
        },
        { "description": "XML (plugin: @prettier/plugin-xml)", "value": "xml" }
      ],
      "description": "Which parser to use.",
      "name": "parser",
      "pluginDefaults": {},
      "since": "0.0.10",
      "type": "choice"
    },
    {
      "category": "PHP",
      "choices": [
        { "value": "5.0" },
        { "value": "5.1" },
        { "value": "5.2" },
        { "value": "5.3" },
        { "value": "5.4" },
        { "value": "5.5" },
        { "value": "5.6" },
        { "value": "7.0" },
        { "value": "7.1" },
        { "value": "7.2" },
        { "value": "7.3" },
        { "value": "7.4" },
        { "value": "8.0" }
      ],
      "default": "7.0",
      "description": "Minimum target PHP version.",
      "name": "phpVersion",
      "pluginDefaults": {},
      "since": "0.13.0",
      "type": "choice"
    },
    {
      "array": true,
      "category": "Global",
      "default": [],
      "description": "Custom directory that contains prettier plugins in node_modules subdirectory.\nOverrides default behavior when plugins are searched relatively to the location of Prettier.\nMultiple values are accepted.",
      "name": "pluginSearchDirs",
      "pluginDefaults": {},
      "since": "1.13.0",
      "type": "path"
    },
    {
      "array": true,
      "category": "Global",
      "default": [],
      "description": "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.",
      "name": "plugins",
      "pluginDefaults": {},
      "since": "1.10.0",
      "type": "path"
    },
    {
      "category": "Global",
      "default": 80,
      "description": "The line length where Prettier will try wrap.",
      "name": "printWidth",
      "pluginDefaults": {
        "@prettier/plugin-ruby": 80,
        "@prettier/plugin-xml": 80
      },
      "range": { "end": null, "start": 0, "step": 1 },
      "since": "0.0.0",
      "type": "int"
    },
    {
      "category": "Common",
      "choices": [
        {
          "description": "Wrap prose if it exceeds the print width.",
          "since": "1.9.0",
          "value": "always"
        },
        {
          "description": "Do not wrap prose.",
          "since": "1.9.0",
          "value": "never"
        },
        {
          "description": "Wrap prose as-is.",
          "since": "1.9.0",
          "value": "preserve"
        }
      ],
      "default": "preserve",
      "description": "How to wrap prose.",
      "name": "proseWrap",
      "pluginDefaults": {},
      "since": "1.8.2",
      "type": "choice"
    },
    {
      "category": "JavaScript",
      "choices": [
        {
          "description": "Only add quotes around object properties where required.",
          "value": "as-needed"
        },
        {
          "description": "If at least one property in an object requires quotes, quote all properties.",
          "value": "consistent"
        },
        {
          "description": "Respect the input use of quotes in object properties.",
          "value": "preserve"
        }
      ],
      "default": "as-needed",
      "description": "Change when properties in objects are quoted.",
      "name": "quoteProps",
      "pluginDefaults": {},
      "since": "1.17.0",
      "type": "choice"
    },
    {
      "category": "Special",
      "default": null,
      "description": "Format code ending at a given character offset (exclusive).\nThe range will extend forwards to the end of the selected statement.\nThis option cannot be used with --cursor-offset.",
      "name": "rangeEnd",
      "pluginDefaults": {},
      "range": { "end": null, "start": 0, "step": 1 },
      "since": "1.4.0",
      "type": "int"
    },
    {
      "category": "Special",
      "default": 0,
      "description": "Format code starting at a given character offset.\nThe range will extend backwards to the start of the first line containing the selected statement.\nThis option cannot be used with --cursor-offset.",
      "name": "rangeStart",
      "pluginDefaults": {},
      "range": { "end": null, "start": 0, "step": 1 },
      "since": "1.4.0",
      "type": "int"
    },
    {
      "category": "Special",
      "default": false,
      "description": "Require either '@prettier' or '@format' to be present in the file's first docblock comment\nin order for it to be formatted.",
      "name": "requirePragma",
      "pluginDefaults": {},
      "since": "1.7.0",
      "type": "boolean"
    },
    {
      "category": "Ruby",
      "default": true,
      "description": "When possible, favor the use of string and symbol array literals.",
      "name": "rubyArrayLiteral",
      "pluginDefaults": {},
      "since": "1.0.0",
      "type": "boolean"
    },
    {
      "category": "Ruby",
      "default": true,
      "description": "When possible, uses the shortened hash key syntax, as opposed to hash rockets.",
      "name": "rubyHashLabel",
      "pluginDefaults": {},
      "since": "1.0.0",
      "type": "boolean"
    },
    {
      "category": "Ruby",
      "default": true,
      "description": "When it fits on one line, allows if, unless, while, and until statements to use the modifier form.",
      "name": "rubyModifier",
      "pluginDefaults": {},
      "since": "1.0.0",
      "type": "boolean"
    },
    {
      "category": "Ruby",
      "default": true,
      "description": "When double quotes are not necessary for interpolation, prefers the use of single quotes for string literals.",
      "name": "rubySingleQuote",
      "pluginDefaults": {},
      "since": "1.0.0",
      "type": "boolean"
    },
    {
      "category": "Ruby",
      "default": false,
      "description": "When possible, convert blocks to the more concise Symbol#to_proc syntax.",
      "name": "rubyToProc",
      "pluginDefaults": {},
      "since": "1.0.0",
      "type": "boolean"
    },
    {
      "category": "JavaScript",
      "default": true,
      "description": "Print semicolons.",
      "name": "semi",
      "oppositeDescription": "Do not print semicolons, except at the beginning of lines which may need them.",
      "pluginDefaults": {},
      "since": "1.0.0",
      "type": "boolean"
    },
    {
      "category": "Common",
      "default": false,
      "description": "Use single quotes instead of double quotes.",
      "name": "singleQuote",
      "pluginDefaults": {},
      "since": "0.0.0",
      "type": "boolean"
    },
    {
      "category": "Format",
      "default": true,
      "description": "SpaceRedirects will put a space after most redirection operators. The exceptions are '>&', '<&', '>(', and '<('.",
      "name": "spaceRedirects",
      "pluginDefaults": {},
      "since": "0.1.0",
      "type": "boolean"
    },
    {
      "category": "Config",
      "description": "StopAt configures the lexer to stop at an arbitrary word, treating it as if it were the end of the input. It can contain any characters except whitespace, and cannot be over four bytes in size.\nThis can be useful to embed shell code within another language, as one can use a special word to mark the delimiters between the two.\nAs a word, it will only apply when following whitespace or a separating token. For example, StopAt(\"$$\") will act on the inputs \"foo $$\" and \"foo;$$\", but not on \"foo '$$'\".\nThe match is done by prefix, so the example above will also act on \"foo $$bar\".",
      "name": "stopAt",
      "pluginDefaults": {},
      "since": "0.1.0",
      "type": "path"
    },
    {
      "category": "Format",
      "default": true,
      "description": "SwitchCaseIndent will make switch cases be indented. As such, switch case bodies will be two levels deeper than the switch itself.",
      "name": "switchCaseIndent",
      "pluginDefaults": {},
      "since": "0.1.0",
      "type": "boolean"
    },
    {
      "category": "Global",
      "default": 2,
      "description": "Number of spaces per indentation level.",
      "name": "tabWidth",
      "pluginDefaults": {
        "@prettier/plugin-php": 4,
        "@prettier/plugin-ruby": 2,
        "@prettier/plugin-xml": 2
      },
      "range": { "end": null, "start": 0, "step": 1 },
      "type": "int"
    },
    {
      "category": "JavaScript",
      "choices": [
        {
          "description": "Trailing commas where valid in ES5 (objects, arrays, etc.)",
          "value": "es5"
        },
        { "description": "No trailing commas.", "value": "none" },
        {
          "description": "Trailing commas wherever possible (including function arguments).",
          "value": "all"
        }
      ],
      "default": "es5",
      "description": "Print trailing commas wherever possible when multi-line.",
      "name": "trailingComma",
      "pluginDefaults": { "@prettier/plugin-ruby": "none" },
      "since": "0.0.0",
      "type": "choice"
    },
    {
      "category": "PHP",
      "default": true,
      "description": "Print trailing commas wherever possible when multi-line.",
      "name": "trailingCommaPHP",
      "pluginDefaults": {},
      "since": "0.0.0",
      "type": "boolean"
    },
    {
      "category": "Global",
      "default": false,
      "description": "Indent with tabs instead of spaces.",
      "name": "useTabs",
      "pluginDefaults": {},
      "since": "1.0.0",
      "type": "boolean"
    },
    {
      "category": "Config",
      "choices": [
        { "description": "Bash", "value": 0 },
        { "description": "POSIX", "value": 1 },
        { "description": "MirBSDKorn", "value": 2 }
      ],
      "description": "Variant changes the shell language variant that the parser will accept.",
      "name": "variant",
      "pluginDefaults": {},
      "since": "0.1.0",
      "type": "choice"
    },
    {
      "category": "HTML",
      "default": false,
      "description": "Indent script and style tags in Vue files.",
      "name": "vueIndentScriptAndStyle",
      "pluginDefaults": {},
      "since": "1.19.0",
      "type": "boolean"
    },
    {
      "category": "XML",
      "default": true,
      "description": "Adds a space before self-closing tags.",
      "name": "xmlSelfClosingSpace",
      "pluginDefaults": {},
      "since": "1.1.0",
      "type": "boolean"
    },
    {
      "category": "XML",
      "choices": [
        {
          "description": "Whitespaces are considered sensitive in all elements.",
          "value": "strict"
        },
        {
          "description": "Whitespaces are considered insensitive in all elements.",
          "value": "ignore"
        }
      ],
      "default": "strict",
      "description": "How to handle whitespaces in XML.",
      "name": "xmlWhitespaceSensitivity",
      "pluginDefaults": {},
      "since": "0.6.0",
      "type": "choice"
    }
  ]
}
